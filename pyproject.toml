[tool.poetry]
name = "hpc-framework"
version = "6.1.0"
description = "Framework for Heuristic Performance Characterization"
readme = "README.md"
authors = ["Brunno Sink <brunnosink2@gmail.com>"]
license = "MIT"
packages = [
  { include = "generator", from = "src" },
  { include = "heuristics", from = "src" },
  { include = "hpc_framework", from = "src" },
  { include = "orchestrator", from = "src" },
]

[tool.poetry.dependencies]
python = ">=3.11,<4.0"
numpy = ">=2.3.1,<3.0.0"
pandas = ">=2.2,<3.0"
scipy = ">=1.16.0,<2.0.0"
jsonschema = ">=4.25.0,<5.0.0"
fabric = ">=3.2.2,<4.0.0"
networkx = { version = ">=3.0", optional = true }
tqdm     = { version = ">=4.67.1,<5.0.0", optional = true }

[tool.poetry.extras]
# Itens precisam bater o regex ^[a-zA-Z-_.0-9]+$
metrics = ["networkx", "tqdm"]

[tool.poetry.group.dev.dependencies]
pytest = "^8.4.2"
pytest-cov = "^5.0.0"
coverage = { version = "^7.10.6", extras = ["toml"] }
ruff = "^0.6.9"
black = "^24.10.0"
mypy = "^1.17.1"
interrogate = "^1.7.0"
mkdocs = "^1.6.1"
mkdocs-material = "^9.5.49"
mkdocstrings = { version = "^0.30.0" }
mkdocstrings-python = { version = "^1.8.2" }
griffe = "^1.5.4"

[tool.poetry.scripts]
instance-generator = "generator.cli:main"
hpc-framework      = "hpc_framework.cli:main"

[build-system]
requires = ["poetry-core>=2.0.0,<3.0.0"]
build-backend = "poetry.core.masonry.api"

# ----------------------------- Ruff ---------------------------------
[tool.ruff]
line-length = 100
target-version = "py311"
extend-exclude = ["dist", "build", ".venv", "env"]

[tool.ruff.lint]
# Use as famílias E,F,I,D,B,UP,C4,SIM
select = ["E","F","I","D","B","UP","C4","SIM"]
# Docstring/códigos que não vamos exigir agora
ignore = ["E501","D200","D202","D203","D205","D211","D213","D401","D103"]

[tool.ruff.lint.isort]
known-first-party = ["hpc_framework","generator","heuristics","orchestrator"]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.per-file-ignores]
"tests/**/*.py" = ["D100","D101","D102","D103","D104"]
"src/orchestrator/**.py" = ["D100"]

# Só opções do formatador que realmente existem nesta seção
[tool.ruff.format]
quote-style = "double"
indent-style = "space"

# ----------------------------- Black --------------------------------
[tool.black]
line-length = 100
target-version = ["py311"]
exclude = "dist|build|\\.venv|env"

# ----------------------------- mypy ---------------------------------
[tool.mypy]
python_version = "3.11"
mypy_path = "src"
explicit_package_bases = true
ignore_missing_imports = true
warn_unused_ignores = true
warn_redundant_casts = true
no_implicit_optional = true
show_error_codes = true
pretty = true

# ----------------------------- pytest -------------------------------
[tool.pytest.ini_options]
addopts = "-q"
testpaths = ["tests"]
filterwarnings = ["ignore::DeprecationWarning"]

# ---------------------------- coverage ------------------------------
[tool.coverage.run]
branch = true
source = ["src"]
omit = [
  "**/__init__.py",
  "src/orchestrator/*",
  "src/orchestrator/**",
]

[tool.coverage.report]
fail_under = 75
show_missing = true
skip_covered = false

# --------------------------- interrogate ----------------------------
[tool.interrogate]
paths = ["src"]
ignore-init-method = true
ignore-init-module = true
ignore-module = false
fail-under = 60
exclude = ["tests", "dist", "build", ".venv", "env"]
